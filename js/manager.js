// Generated by CoffeeScript 1.7.1
(function() {
  var File, Manager, async, path, stream,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  stream = require('stream');

  path = require('path');

  async = require('async');

  File = libRequire('file');

  Manager = (function(_super) {
    __extends(Manager, _super);

    function Manager() {
      var arg, args, cb, index, _base, _i, _len, _ref;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      this.args = args;
      Manager.__super__.constructor.apply(this, arguments);
      this.setEncoding("utf-8");
      this.paths = [];
      _ref = this.args.reverse();
      for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
        arg = _ref[index];
        switch (false) {
          case !(typeof arg === "function" && index === 0):
            cb = arg;
            break;
          case !(typeof arg === "object" && (index === 0 || index === 1)):
            this.opts = arg;
            break;
          default:
            this.paths.push(arg);
        }
      }
      if (this.opts == null) {
        this.opts = {};
      }
      if ((_base = this.opts).dir == null) {
        _base.dir = ".tmp";
      }
      this.normalizePaths();
      this.bootstrap(cb);
    }

    Manager.prototype._read = function(size) {
      var file, _, _i, _len, _ref, _results;
      _ = (function(_this) {
        return function(file) {
          return file.on("data", function(data) {
            return _this.push(data);
          });
        };
      })(this);
      _ref = this.files;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        file = _ref[_i];
        _results.push(_(file));
      }
      return _results;
    };

    Manager.prototype.bootstrap = function(cb) {
      var _;
      this.files = [];
      _ = (function(_this) {
        return function(obj, cb) {
          var file;
          obj.path = path.resolve(path.join(_this.opts.dir, obj.path));
          file = new File(obj.path, obj.msg, function(err) {
            return cb();
          });
          return _this.files.push(file);
        };
      })(this);
      return async.each(this.paths, _, function(err) {
        if (err) {
          return typeof cb === "function" ? cb(err) : void 0;
        }
        return typeof cb === "function" ? cb() : void 0;
      });
    };

    Manager.prototype.normalizePaths = function() {
      var _, _path;
      this.paths = !this.paths.length > 0 ? ["stop"] : this.paths;
      _ = (function(_this) {
        return function(obj) {
          var msg;
          if (typeof obj === "string") {
            obj = {
              path: obj
            };
          }
          if (obj.msg == null) {
            msg = path.basename(obj.path);
            obj.msg = msg[0] === "." ? msg.slice(1) : msg;
          }
          return obj;
        };
      })(this);
      return this.paths = (function() {
        var _i, _len, _ref, _results;
        _ref = this.paths;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          _path = _ref[_i];
          _results.push(_(_path));
        }
        return _results;
      }).call(this);
    };

    Manager.prototype.close = function(cb) {
      var file, _i, _len, _ref;
      _ref = this.files;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        file = _ref[_i];
        file.close();
      }
      this.emit("close");
      return typeof cb === "function" ? cb() : void 0;
    };

    return Manager;

  })(stream.Readable);

  module.exports = Manager;

}).call(this);
