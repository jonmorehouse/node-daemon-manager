// Generated by CoffeeScript 1.6.3
(function() {
  var File, Manager, async, path, stream,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  stream = require('stream');

  path = require('path');

  async = require('async');

  File = libRequire('file');

  Manager = (function(_super) {
    __extends(Manager, _super);

    function Manager(paths, opts, cb) {
      this.paths = paths;
      this.opts = opts;
      Manager.__super__.constructor.apply(this, arguments);
      if (typeof this.opts === "function" && (cb == null)) {
        cb = this.opts;
      }
      if (this.opts.dir == null) {
        this.opts.dir = ".tmp";
      }
      this.normalize();
      this.bootstrap(cb);
    }

    Manager.prototype._read = function(size) {
      var file, _, _i, _len, _ref, _results,
        _this = this;
      _ = function(file) {
        return file.on("data", function(data) {
          return _this.push(data);
        });
      };
      _ref = this.files;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        file = _ref[_i];
        _results.push(_(file));
      }
      return _results;
    };

    Manager.prototype.bootstrap = function(cb) {
      var _,
        _this = this;
      this.files = [];
      _ = function(obj, cb) {
        var file;
        obj.path = path.resolve(path.join(_this.opts.dir, obj.path));
        file = new File(obj.path, obj.msg, function(err) {
          return cb();
        });
        return _this.files.push(file);
      };
      return async.each(this.paths, _, function(err) {
        if (err) {
          return typeof cb === "function" ? cb(err) : void 0;
        }
        return typeof cb === "function" ? cb() : void 0;
      });
    };

    Manager.prototype.normalize = function() {
      var _, _path,
        _this = this;
      if (!typeof this.paths === "array") {
        this.paths = [this.paths];
      }
      _ = function(obj) {
        var msg;
        if (typeof obj === "string") {
          obj = {
            path: obj
          };
        }
        if (obj.msg == null) {
          msg = path.basename(obj.path);
          obj.msg = msg[0] === "." ? msg.slice(1) : msg;
        }
        return obj;
      };
      return this.paths = (function() {
        var _i, _len, _ref, _results;
        _ref = this.paths;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          _path = _ref[_i];
          _results.push(_(_path));
        }
        return _results;
      }).call(this);
    };

    Manager.prototype.close = function(cb) {
      var file, _i, _len, _ref;
      _ref = this.files;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        file = _ref[_i];
        file.close();
      }
      return typeof cb === "function" ? cb() : void 0;
    };

    return Manager;

  })(stream.Readable);

  module.exports = Manager;

}).call(this);
